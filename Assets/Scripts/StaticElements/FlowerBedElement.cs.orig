using UnityEngine;

public class FlowerBedElement : PlantElement
{
    private void Start()
    {
        if (ConstructionController.instance.flowerBeds.Count < 1)
        {
            MessageHandler.instance.ErrorMessage("flower_bed", "no_flowerbed");
            ConstructionController.instance.Cancel();
        }
    }

<<<<<<< HEAD
    public override void Select(ConstructionController.ConstructionState state)
    {
      UIController uIController = Camera.main.GetComponent<UIController>();
      TextMeshProUGUI[] labels = uIController.dataPanel.GetComponentsInChildren<TextMeshProUGUI>();

        if (ConstructionController.instance.currentState == ConstructionController.ConstructionState.Off)
        {
            RectTransform menuTransform = uIController.extendMenu.RectTransform;
            RectTransform viewTransform = uIController.plantsViews[0].RectTransform;
            uIController.SpawnDynMenu(this);
            if (!uIController.PlantsViewsDisplay())
                uIController.dataPanel.GetView().CustomStartAnchoredPosition = new Vector3(- menuTransform.sizeDelta.x + 0.3f, -33.46f, 0);
            else
                uIController.dataPanel.GetView().CustomStartAnchoredPosition = new Vector3(- menuTransform.sizeDelta.x + viewTransform.sizeDelta.x + 0.3f, -33.46f, 0);
            if (labels[labels.Length - 1].text != plantName || uIController.dataPanel.GetView().IsHidden)
                    uIController.SetDataPanel(plantName, plantType);
        }
    }

    public override void DeSelect()
    {
        if (Camera.main != null)
        {
            UIController uIController = Camera.main.GetComponent<UIController>();

            if (uIController.GetMenuScript() != null)
            {
                uIController.GetMenuScript().GetComponentInChildren<LabelScript>().ResetColor();
                uIController.GetMenuScript().DestroyMenu();
            }
            else
                uIController.DestroyMenu();
        }
    }

=======
>>>>>>> 58be7fb0c2b98ac5da4621981bd0d9c681ed828d
    //Serialization
    public override SerializationData Serialize()
    {
        SerializationData tmp = new SerializationData();

        tmp.type = SerializationController.ItemType.FlowerBedElement;
        tmp.data = JsonUtility.ToJson(InnerSerialize());
        return tmp;
    }
}